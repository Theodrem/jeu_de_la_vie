{"ast":null,"code":"var _jsxFileName = \"/Users/theotim/hetic/front/react-game-of-life/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport \"bulma/css/bulma.min.css\";\nimport { useState, useCallback } from \"react\";\nimport \"./App.css\";\nimport useInterval from \"./useInterval\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 25;\nconst numCols = 35; // Directions: N, S, E, W, NE, NW, SE, SW\n\nconst operations = [[0, 1], // right\n[0, -1], // left\n[1, -1], // top left\n[-1, 1], // top right\n[1, 1], // top\n[-1, -1], // bottom\n[1, 0], // bottom right\n[-1, 0] // bottom left\n];\n\nconst randomTiles = () => {\n  const rows = [];\n\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => Math.random() > 0.7 ? 1 : 0));\n  }\n\n  return rows;\n};\n\nconst App = () => {\n  _s();\n\n  const [grid, setGrid] = useState(() => {\n    return randomTiles();\n  });\n  const runSimulation = useCallback(grid => {\n    let gridCopy = JSON.parse(JSON.stringify(grid));\n\n    for (let i = 0; i < numRows; i++) {\n      for (let j = 0; j < numCols; j++) {\n        let neighbors = 0;\n        operations.forEach(([x, y]) => {\n          const newI = i + x;\n          const newJ = j + y;\n\n          if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n            neighbors += grid[newI][newJ];\n          }\n        });\n\n        if (neighbors < 2 || neighbors > 3) {\n          gridCopy[i][j] = 0;\n        } else if (grid[i][j] === 0 && neighbors === 3) {\n          gridCopy[i][j] = 1;\n        }\n      }\n    }\n\n    setGrid(gridCopy);\n  }, []);\n  useInterval(() => {\n    runSimulation(grid);\n  }, 150);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container has-text-centered py-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title is-uppercase\",\n      children: \"Game of Life\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        width: \"fit-content\",\n        margin: \"0 auto\"\n      },\n      children: grid.map((rows, i) => rows.map((col, k) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          // Deep clone grid\n          let newGrid = JSON.parse(JSON.stringify(grid));\n          newGrid[i][k] = grid[i][k] ? 0 : 1;\n          setGrid(newGrid);\n        },\n        style: {\n          width: 20,\n          height: 20,\n          backgroundColor: grid[i][k] ? \"#F68E5F\" : undefined,\n          border: \"1px solid #595959\"\n        }\n      }, `${i}-${k}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons is-centered pt-5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"dM98neGwI915/FQT8gAxLN25Dj8=\", false, function () {\n  return [useInterval];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/theotim/hetic/front/react-game-of-life/src/App.tsx"],"names":["useState","useCallback","useInterval","numRows","numCols","operations","randomTiles","rows","i","push","Array","from","Math","random","App","grid","setGrid","runSimulation","gridCopy","JSON","parse","stringify","j","neighbors","forEach","x","y","newI","newJ","display","gridTemplateColumns","width","margin","map","col","k","newGrid","height","backgroundColor","undefined","border"],"mappings":"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","sourcesContent":["import \"bulma/css/bulma.min.css\";\nimport { FC, useState, useRef, useCallback } from \"react\";\nimport { Pause, Play, XCircle, Globe } from \"react-feather\";\nimport \"./App.css\";\nimport useInterval from \"./useInterval\";\n\nconst numRows = 25;\nconst numCols = 35;\n\n// Directions: N, S, E, W, NE, NW, SE, SW\nconst operations = [\n  [0, 1], // right\n  [0, -1], // left\n  [1, -1], // top left\n  [-1, 1], // top right\n  [1, 1], // top\n  [-1, -1], // bottom\n  [1, 0], // bottom right\n  [-1, 0], // bottom left\n];\n\nconst randomTiles = (): number[][] => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0)));\n  }\n  return rows;\n};\n\nconst App: FC = () => {\n  const [grid, setGrid] = useState(() => {\n    return randomTiles();\n  });\n\n\n\n  const runSimulation = useCallback((grid) => {\n\n\n    let gridCopy = JSON.parse(JSON.stringify(grid));\n    for (let i = 0; i < numRows; i++) {\n      for (let j = 0; j < numCols; j++) {\n        let neighbors = 0;\n\n        operations.forEach(([x, y]) => {\n          const newI = i + x;\n          const newJ = j + y;\n\n          if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n            neighbors += grid[newI][newJ];\n          }\n        });\n\n        if (neighbors < 2 || neighbors > 3) {\n          gridCopy[i][j] = 0;\n        } else if (grid[i][j] === 0 && neighbors === 3) {\n          gridCopy[i][j] = 1;\n        }\n      }\n    }\n\n    setGrid(gridCopy);\n  }, []);\n\n  useInterval(() => {\n    runSimulation(grid);\n  }, 150);\n\n  return (\n    <div className=\"container has-text-centered py-5\">\n      <h1 className=\"title is-uppercase\">Game of Life</h1>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n          width: \"fit-content\",\n          margin: \"0 auto\",\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                // Deep clone grid\n                let newGrid = JSON.parse(JSON.stringify(grid));\n                newGrid[i][k] = grid[i][k] ? 0 : 1;\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][k] ? \"#F68E5F\" : undefined,\n                border: \"1px solid #595959\",\n              }}\n            ></div>\n          ))\n        )}\n      </div>\n\n      <div className=\"buttons is-centered pt-5\">\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}