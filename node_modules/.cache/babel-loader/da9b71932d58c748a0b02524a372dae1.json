{"ast":null,"code":"var _jsxFileName = \"/Users/theotim/hetic/front/game-of-life/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport \"bulma/css/bulma.min.css\";\nimport { useState, useCallback } from \"react\";\nimport useInterval from \"./useInterval\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 20;\nconst numCols = 20;\nconst positions = [[0, 1], // droite\n[0, -1], // gauche\n[1, -1], // haut gauche\n[-1, 1], // haut droite\n[1, 1], // haut\n[-1, -1], // bas\n[1, 0], // bas droite\n[-1, 0] // bas gauche\n];\n\nconst random = () => {\n  const rows = [];\n\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => Math.random() > 0.7 ? 1 : 0));\n  }\n\n  return rows;\n};\n\nconst running = useCallback(grid => {\n  let gridCopy = JSON.parse(JSON.stringify(grid));\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      let neighbors = 0;\n      positions.forEach(([x, y]) => {\n        const newI = i + x;\n        const newJ = j + y;\n\n        if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n          neighbors += grid[newI][newJ];\n        }\n      });\n\n      if (neighbors < 2 || neighbors > 3) {\n        gridCopy[i][j] = 0;\n      } else if (grid[i][j] === 0 && neighbors === 3) {\n        gridCopy[i][j] = 1;\n      }\n    }\n  }\n\n  setGrid(gridCopy);\n}, []);\nuseInterval(() => {\n  running(grid);\n}, 150);\n\nconst App = () => {\n  _s();\n\n  const [grid, setGrid] = useState(() => {\n    return random();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container has-text-centered py-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        width: \"fit-content\",\n        margin: \"0 auto\"\n      },\n      children: grid.map((rows, i) => rows.map((col, k) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          // Deep clone grid\n          let newGrid = JSON.parse(JSON.stringify(grid));\n          newGrid[i][k] = grid[i][k] ? 0 : 1;\n          setGrid(newGrid);\n        },\n        style: {\n          width: 20,\n          height: 20,\n          backgroundColor: grid[i][k] ? \"#1CB8A9\" : undefined\n        }\n      }, `${i}-${k}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"T0BHbvBxMP0mal2xSp06JtX6ua0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/theotim/hetic/front/game-of-life/src/App.tsx"],"names":["useState","useCallback","useInterval","numRows","numCols","positions","random","rows","i","push","Array","from","Math","running","grid","gridCopy","JSON","parse","stringify","j","neighbors","forEach","x","y","newI","newJ","setGrid","App","display","gridTemplateColumns","width","margin","map","col","k","newGrid","height","backgroundColor","undefined"],"mappings":"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","sourcesContent":["import \"bulma/css/bulma.min.css\";\nimport { FC, useState, useRef, useCallback } from \"react\";\nimport useInterval from \"./useInterval\";\n\nconst numRows = 20;\nconst numCols = 20;\n\nconst positions = [\n  [0, 1], // droite\n  [0, -1], // gauche\n  [1, -1], // haut gauche\n  [-1, 1], // haut droite\n  [1, 1], // haut\n  [-1, -1], // bas\n  [1, 0], // bas droite\n  [-1, 0], // bas gauche\n];\n\nconst random = (): number[][] => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0)));\n  }\n  return rows;\n};\n\nconst running = useCallback((grid) => {\n    let gridCopy = JSON.parse(JSON.stringify(grid));\n    for (let i = 0; i < numRows; i++) {\n      for (let j = 0; j < numCols; j++) {\n        let neighbors = 0;\n\n        positions.forEach(([x, y]) => {\n          const newI = i + x;\n          const newJ = j + y;\n\n          if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n            neighbors += grid[newI][newJ];\n          }\n        });\n\n        if (neighbors < 2 || neighbors > 3) {\n          gridCopy[i][j] = 0;\n        } else if (grid[i][j] === 0 && neighbors === 3) {\n          gridCopy[i][j] = 1;\n        }\n      }\n    }\n\n    setGrid(gridCopy);\n  }, []);\n\n  useInterval(() => {\n    running(grid);\n  }, 150);\n\nconst App: FC = () => {\n  const [grid, setGrid] = useState(() => {\n    return random();\n  });\n\n\n\n  return (\n    <div className=\"container has-text-centered py-5\">\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n          width: \"fit-content\",\n          margin: \"0 auto\",\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                // Deep clone grid\n                let newGrid = JSON.parse(JSON.stringify(grid));\n                newGrid[i][k] = grid[i][k] ? 0 : 1;\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][k] ? \"#1CB8A9\" : undefined,\n              }}\n            ></div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}